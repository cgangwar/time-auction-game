üéØ Project Overview Game Title: Time Auction
Platforms: iOS App (Swift), Web App (React.js), Android App (Kotlin) 
‚Äì Android support to be added in Phase 3
Game Type: Real-time multiplayer strategy game
Core Mechanics: Time-based bidding system across multiple rounds
Target Audience: Fans of strategic, psychological games; viewers of The Devil‚Äôs Plan
Phased Implementation Plan We will implement the game in a staged manner to ensure stability and excellent user experience before expanding platforms.
Phase 1 ‚Äì Web Integration with Internet
‚Ä¢	Assume internet is available, enhance iOS and Web app to support cross-platform play
‚Ä¢	Add Node.js server with WebSocket (Socket.io) support
‚Ä¢	Introducing lobby matchmaking, game persistence
‚Ä¢	Add user accounts (basic email/password) and player profile 

Phase 2 ‚Äì Local Bluetooth Offline Mode (iOS Only)
‚Ä¢	Implement peer-to-peer local multiplayer using CoreBluetooth
‚Ä¢	Game Host acts as Game Server; all players join via BLE
‚Ä¢	All game logic runs on the host device
‚Ä¢	Bluetooth message protocol includes JOIN, START_ROUND, TIME_BID, WINNER_SYNC
‚Ä¢	Offline local play mode with minimal UI and no server/backend dependency
Phase 3 ‚Äì Android App Support
‚Ä¢	Build Android app using Kotlin and Jetpack Compose
‚Ä¢	Integrate with existing backend and real-time architecture
‚Ä¢	Support BLE and online multiplayer modes
üß© Game Mechanics Summary Total Rounds: 18 Player Time Bank: Each player starts with 600 seconds (10 minutes) Round Play:
‚Ä¢	Players decide how long to press a buzzer within each round
‚Ä¢	The player who holds the buzzer the longest wins the round and earns a victory token
‚Ä¢	Time held is deducted from the player's remaining time bank Elimination: After 18 rounds, the player with the fewest victory tokens is eliminated
‚Ä¢	Players can‚Äôt see each other‚Äôs remaining time, they only see the common clock running until final winning player lifts their hand off the buzzer.
üß± Technical Architecture Frontend
‚Ä¢	Server Framework: Node.js with Express.js
‚Ä¢	Real-Time Communication: Socket.io
‚Ä¢	Database: MongoDB Atlas
‚Ä¢	iOS App: Swift and SwiftUI for native performance
‚Ä¢	Web App: React.js with responsive design
‚Ä¢	Android App (Phase 3): Kotlin and Jetpack Compose
Cross-Platform Considerations
‚Ä¢	API Design: RESTful APIs with JSON responses
‚Ä¢	Authentication: Email/password (Phase 1) , OAuth 2.0 (Phase 2)
‚Ä¢	State Management: Redux for React, equivalents for Swift/Kotlin
üé® UX/UI Design Recommendations Design Philosophy
‚Ä¢	Minimalist Aesthetic: Inspired by Dots and Candy Crush
‚Ä¢	Intuitive Navigation: Bottom navigation bars
‚Ä¢	Responsive Design: Adapts to screen sizes
Key UI Components
‚Ä¢	Home Screen: Active games, quick start, settings
‚Ä¢	Game Lobby: Avatars, round count, chat (Phase 2)
‚Ä¢	Gameplay Screen:
o	Central buzzer button with timer
o	Player‚Äôs own remaining time bank
o	Real-time token counter
‚Ä¢	Post-Game Summary:
o	Player performance, rounds won, time spent per round, time remaining
o	Time spent per round
o	Other player‚Äôs performance rounds won, time spent per round, time remaining
o	Micro-Interactions
‚Ä¢	Haptic feedback on interactions
‚Ä¢	Color changes and progress bars for time indication
üîê Security and Fair Play
‚Ä¢	End-to-end encryption and secure data storage
‚Ä¢	Anti-cheat systems monitoring for anomalies
‚Ä¢	In-app player reporting system
üìà Future Enhancements
‚Ä¢	Android App Development (Phase 3)
‚Ä¢	Social Features: Friends, messaging, leaderboards
‚Ä¢	Customization: Avatars, buzzer sounds
‚Ä¢	Analytics: User engagement tracking and feedback

